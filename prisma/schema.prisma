generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Piece {
  id               String          @id @default(cuid())
  title            String
  composer         String
  contributorId    String?
  active           Boolean         @default(false)
  meiUrl           String?
  meiData          String?
  contributorEmail String?
  createdAt        DateTime        @default(now())
  format           String
  updatedAt        DateTime        @updatedAt
  gschemas         Gschema_Piece[]
  contributor      User?           @relation(fields: [contributorId], references: [id])
}

model Gschema {
  id            String          @id @default(cuid())
  name          String
  contributorId String?
  citation      String?
  active        Boolean         @default(false)
  eventcount    Int
  type          String
  orderIndex    Int             @default(1000)
  contributor   User?           @relation(fields: [contributorId], references: [id])
  pieces        Gschema_Piece[]
  events        Gschema_event[]
}

model Gschema_event {
  id        String                @id @default(cuid())
  gschemaId String?
  index     Int
  type      String
  value     String
  gschema   Gschema?              @relation(fields: [gschemaId], references: [id])
  pieces    Gschema_event_Piece[]
}

model Gschema_Piece {
  id            String                @id @default(cuid())
  published     Boolean               @default(false)
  contributorId String?
  pieceId       String?
  gschemaId     String?
  measureend    Int?
  measurestart  Int?
  contributor   User?                 @relation(fields: [contributorId], references: [id])
  gschema       Gschema?              @relation(fields: [gschemaId], references: [id])
  piece         Piece?                @relation(fields: [pieceId], references: [id])
  annotations   Gschema_event_Piece[]
}

model Gschema_event_Piece {
  id              String         @id @default(cuid())
  Gschema_PieceId String?
  piece_location  String?
  Gschema_eventId String
  Gschema_Piece   Gschema_Piece? @relation(fields: [Gschema_PieceId], references: [id])
  Gschema_event   Gschema_event  @relation(fields: [Gschema_eventId], references: [id])
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean         @default(false)
  accounts       Account[]
  gschemas       Gschema[]
  gschema_pieces Gschema_Piece[]
  pieces         Piece[]
  posts          Post[]
  sessions       Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MusicSource {
  id          String   @id @default(cuid())
  name        String
  description String
  baseUrl     String
  indexFile   String
  composer    String
  format      String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
