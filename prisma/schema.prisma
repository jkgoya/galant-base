// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Piece {
  id             String @id @default(cuid())
  title          String
  composer       String
  contributor    User?@relation(fields:[contributorId], references:[id])
  contributorId  String?
  active         Boolean @default(false)
  scoreUrl       String
  scoreFormat    String
  meiUrl         String?
  meiData        String?
  gschemas       Gschema_Piece[]
}

model Gschema {
  id             String @id @default(cuid())
  name           String
  contributor    User?@relation(fields:[contributorId], references:[id])
  contributorId  String?
  citation       String?
  active         Boolean @default(false)
  eventcount     Int
  type           String
  events         Gschema_event[]
  pieces         Gschema_Piece[]
}

model Gschema_event {
  id             String @id @default(cuid())
  gschemaId      String?
  gschema        Gschema?@relation(fields:[gschemaId], references:[id])
  index          Int
  type           String
  value          String
  pieces         Gschema_event_Piece[]
}

model Gschema_Piece {
  id        String  @id @default(cuid())
  published Boolean @default(false)
  contributor    User?@relation(fields:[contributorId], references:[id])
  contributorId  String?
  piece          Piece?@relation(fields:[pieceId], references:[id])
  pieceId        String?
  gschema        Gschema?@relation(fields:[gschemaId], references:[id])
  gschemaId      String?
  annotations    Gschema_event_Piece[]
}

model Gschema_event_Piece {
  id               String  @id @default(cuid())
  Gschema_Piece    Gschema_Piece?@relation(fields:[Gschema_PieceId], references:[id])
  Gschema_PieceId  String?
  piece_location   String?
  Gschema_event    Gschema_event?@relation(fields:[Gschema_eventId], references:[id])
  Gschema_eventId  String

}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?@relation(fields:[authorId], references:[id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  pieces        Piece[]
  gschemas      Gschema[]
  gschema_pieces Gschema_Piece[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}